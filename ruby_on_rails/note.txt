CHAPTER 1:
1.rails command creates:
  rails new hello_app
2.Bundles:
	file: gemfile
	constructure: gem 'webpacker', '~> 4.0'
	command:
		bundle update
		bundle install
		bundle install --without production
3.run app:
	rails server
	default adress: http://localhost:3000
4.architectural pattern:
	MVC
5.Version control system:
	github

CHAPTER 2:
1. rails scaffold:
	rails generate scaffold User name:string email:string
2. migrate database:
	rails db:migrate
3. Create user by scaffold:
	rails generate scaffold User name:string email:string
	list pages for suser:
		/users index page to list all users
		/users/1 show page to show user with id 1
		/users/new new page to make a new user
		/users/1/edit edit page to edit user with id 1
4. restful routes provided by the user resources
	HTTP request URL Action Purpose
	GET /users index page to list all users
	GET /users/1 show page to show user with id 1
	GET /users/new new page to make a new user
	POST /users create create a new user
	GET /users/1/edit edit page to edit user with id 1
	PATCH /users/1 update update user with id 1
	DELETE /users/1 destroy delete user with id 1
5. By referring to Figure 2.11, write out the analogous steps for visiting the
URL /users/1/edit.
	-The browser issues a request for the /user/1/edit URL.
	-Rails routes /user/1/edit to the edit action in Users controler with user_id=1
	-the edit action call set_user method,set_user asks the the user model to retrive information of user 1
	-the user model pulls user 1 from database.
	-the User model returns user 1 to the controller
	-the controller captures the user has user_id=1 in the @user variable
	,which is passed to the view the view uses embedded ruby to render the page as html
	-the controller passes the html back to the browser.
6. Weaknesses of scaffold Users resource:
	-No data validation
	-No authentication
	-No tests
	-No style or layout
	-No real understanding
7. associations between different data models
	-has_many
	-belong_to
8.Validate
	-validate :attribute, length: {maximum: 140}, presence:true
	-length {maximum: 140} max length of attribute
	-presence: cant blank
9.What we learned in this chapter
	• Scaffolding automatically creates code to model data and interact with it
	through the web.
	• Scaffolding is good for getting started quickly but is bad for understanding.
	• Rails uses the Model-View-Controller (MVC) pattern for structuring web
	applications.
	• As interpreted by Rails, the REST architecture includes a standard set of
	URLs and controller actions for interacting with data models.
	• Rails supports data validations to place constraints on the values of data
	model attributes.
	• Rails comes with built-in functions for defining associations between different data models.
	• We can interact with Rails applications at the command line using the
	Rails console.

CHAPTER 3
1.rails command shortcut
	$ rails server 			$ rails s
	$ rails console 		$ rails c
	$ rails generate 		$ rails g
	$ rails test 				$ rails t
	$ bundle install 		$ bundle
2.undo in Rails
	$ rails generate controller StaticPages home help			$ rails destroy controller StaticPages home help
	$ rails generate model User name:string email:string  $ rails destroy model User
	$ rails db:migrate			$ rails db:rollback			$ rails db:migrate VERSION=0
3.rails script generate controller
	rails generate controller StaticPages home help
4.define route in file config/routes.rb
	get "static_pages/home"
5.Test-driven development uses a “Red, Green, Refactor” cycle
	rails test
6.Rails layouts allow the use of a common template for pages in our application, thereby eliminating duplication
CHAPTER 4
• Ruby has a large number of methods for manipulating strings of characters.
• Everything in Ruby is an object.
• Ruby supports method definition via the def keyword.
• Ruby supports class definition via the class keyword.
• Rails views can contain static HTML or embedded Ruby (ERb).
• Built-in Ruby data structures include arrays, ranges, and hashes.
• Ruby blocks are a flexible construct that (among other things) allow natural iteration over enumerable data structures.
• Symbols are labels, like strings without any additional structure.
• Ruby supports object inheritance.
• It is possible to open up and modify built-in Ruby classes.
CHAPTER 5
	-add boostrap in project:
		add "gem 'boostrap-sass'" in gemfile
		add "@import "bootstrap-sprockets"; @import "bootstrap";" in application.scss
	-method link_to:
		<%= link_to "text",link%>
	-patial view
		name:_patial_name.html.erb
		<%=render 'layouts/patial_name'%>
		<%= render partial: "form", object: @user, as: "user" %>
		<%= render @users %>
	-custom routes:
		get "home", to: "static_pages#home"
		named route: home_path
	-generate a integration test:
		rails generate integration_test site_layout
Representational state transfer (REST) is a software architectural style that describes the architecture of the Web. It was derived from the following constraints:
	-client-server communication
	-stateless communication
	-caching
	-uniform interface
	-layered system
	-code on demand
	-The uniform interface itself creates four interface constraints:
		Identification of resources
		Manipulation of resources through representations
		Self-descriptive messages
		Hypermedia as the engine of application state (HATEOAS)
CHAPTER 6:Model
	create a user model:
		rails generate model Users name:string email:string
	migrate table in database:
		rails db:migrate
	create a row in user table:
		-user=User.new(name: "hanh",email: "tt.hanh.nguyen1@tomosia.com")
		 user.save
		-user=User.create(name: "hanh",email: "tt.hanh.nguyen1@tomosia.com")
	delete a row in user table:
		-user.detroy(, the destroyed object still exists in memory)
	finding user objects
		User.find(2)
		User.find_by(email:"tt.hanh.nguyen@tomosia.com")
		User.first
		User.all
	Updating user objects
		user=User.find(1)
		user.email="hanh@gmail.com"
		user.save (the final step is necessary to write the changes to the database)
		user.update(name: "The Dude", email: "dude@abides.org")
		update_attribute skipping the validations:
		user.update_attribute(:name,"hanh nguyen")
	Add a secure password:
		rails generate migration add_password_digest_to_users password_digest:string
		migrate database: rails db:migrate
		add bcrypt gem: gem "bcrypt"
		add has_secure_password to User model
		add: validates :password, presence: true, length: {minimum: 6}
	object life cycle:
		-create
			before_validation
			after_validation
			before_save
			around_save
			before_create
			around_create
			after_create
			after_save
			after_commit / after_rollback
		-update
			before_validation
			after_validation
			before_save
			around_save
			before_update
			around_update
			after_update
			after_save
			after_commit / after_rollback
		-destroy
			before_destroy
			around_destroy
			after_destroy
			after_commit / after_rollback